/**
 * API-DTO Link Controller
 */

import { Request, Response, NextFunction } from 'express';
import { ApiDtoLinkService } from '../services/apiDtoLink.service';
import { prisma } from '../config/database';

export class ApiDtoLinkController {
  private apiDtoLinkService: ApiDtoLinkService;

  constructor() {
    this.apiDtoLinkService = new ApiDtoLinkService(prisma);
  }

  /**
   * 建立關聯
   */
  create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const link = await this.apiDtoLinkService.create(req.body);
      
      res.status(201).json({
        success: true,
        data: link,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 批次建立關聯
   */
  batchCreate = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { links } = req.body;
      const created = await this.apiDtoLinkService.batchCreate(links);
      
      res.status(201).json({
        success: true,
        data: created,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 取得單一關聯
   */
  findById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { id } = req.params;
      const link = await this.apiDtoLinkService.findById(id);
      
      res.json({
        success: true,
        data: link,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 列出關聯
   */
  findMany = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { apiId, dtoId, role, projectId, page, limit, includeDetails } = req.query;

      const filter = {
        apiId: apiId as string | undefined,
        dtoId: dtoId as string | undefined,
        role: role as 'req' | 'res' | undefined,
        projectId: projectId as string | undefined,
      };

      const options = {
        page: page ? parseInt(page as string) : undefined,
        limit: limit ? parseInt(limit as string) : undefined,
        includeDetails: includeDetails === 'true',
      };

      const result = await this.apiDtoLinkService.findMany(filter, options);
      
      res.json({
        success: true,
        ...result,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 更新關聯
   */
  update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { id } = req.params;
      const link = await this.apiDtoLinkService.update(id, req.body);
      
      res.json({
        success: true,
        data: link,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 刪除關聯
   */
  delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { id } = req.params;
      await this.apiDtoLinkService.delete(id);
      
      res.status(204).send();
    } catch (error) {
      next(error);
    }
  };

  /**
   * 依 API 取得 DTOs
   */
  findDtosByApi = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { apiId } = req.params;
      const dtos = await this.apiDtoLinkService.findDtosByApi(apiId);
      
      res.json({
        success: true,
        data: dtos,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 依 DTO 取得 APIs
   */
  findApisByDto = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { dtoId } = req.params;
      const apis = await this.apiDtoLinkService.findApisByDto(dtoId);
      
      res.json({
        success: true,
        data: apis,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 自動產生 DTOs
   */
  autoGenerateDtos = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { apiId } = req.params;
      const dtos = await this.apiDtoLinkService.autoGenerateDtos(apiId);
      
      res.json({
        success: true,
        data: dtos,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * 取得統計資訊
   */
  getStatistics = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { projectId } = req.query;
      const stats = await this.apiDtoLinkService.getStatistics(projectId as string | undefined);
      
      res.json({
        success: true,
        data: stats,
      });
    } catch (error) {
      next(error);
    }
  };
}

export default ApiDtoLinkController;